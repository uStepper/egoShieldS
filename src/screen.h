/********************************************************************************************
* 	 	File: 		screen.h																*
*		Version:    1.1.0                                           						*
*      	Date: 		April 1st, 2020	                                    					*
*      	Author: 	Mogens Groth Nicolaisen                                					*
*                                                   										*	
*********************************************************************************************
* (C) 2020                                                                                  *
*                                                                                           *
* uStepper ApS                                                                              *
* www.ustepper.com                                                                          *
* administration@ustepper.com                                                               *
*                                                                                           *
* The code contained in this file is released under the following open source license:      *
*                                                                                           *
*     Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International               *
*                                                                                           *
*   The code in this file is provided without warranty of any kind - use at own risk!       *
*   neither uStepper ApS nor the author, can be held responsible for any damage             *
*   caused by the use of the code contained in this file !                                  *
*                                                                                           *
********************************************************************************************/
/**
 * @file screen.h
 * @brief      class definitions for the screen handling
 *
 * @author     Mogens Groth Nicolaisen (mogens@ustepper.com)
 */
#ifndef _SCREEN_H_
#define _SCREEN_H_

#include <inttypes.h>
#include <avr/io.h>
#include <stdlib.h>
#include "Arduino.h"
#include <avr/pgmspace.h>
#include <EEPROM.h>

#define SSD1306_ADDR		0x3C

#define LEFT	0
#define RIGHT	9999
#define CENTER	9998

#define SLEEP_ON				true
#define SLEEP_OFF				false

#define SSD1306_COMMAND			0x00
#define SSD1306_DATA			0xC0
#define SSD1306_DATA_CONTINUE	0x40

// Parameters for 128x64 displays
#define SSD1306_128X64				0x40
#define H64_MULTIPLEX_RATIO			0x3F
#define H64_COM_PINS				0x12
#define H64_BUFFER_SIZE				0x0400
#define H64_DISPLAY_HEIGHT			0x40

// SSD1306 Commandset
// ------------------
// Fundamental Commands
#define SSD1306_SET_CONTRAST_CONTROL					0x81
#define SSD1306_DISPLAY_ALL_ON_RESUME					0xA4
#define SSD1306_DISPLAY_ALL_ON							0xA5
#define SSD1306_NORMAL_DISPLAY							0xA6
#define SSD1306_INVERT_DISPLAY							0xA7
#define SSD1306_DISPLAY_OFF								0xAE
#define SSD1306_DISPLAY_ON								0xAF
#define SSD1306_NOP										0xE3
// Scrolling Commands
#define SSD1306_HORIZONTAL_SCROLL_RIGHT					0x26
#define SSD1306_HORIZONTAL_SCROLL_LEFT					0x27
#define SSD1306_HORIZONTAL_SCROLL_VERTICAL_AND_RIGHT	0x29
#define SSD1306_HORIZONTAL_SCROLL_VERTICAL_AND_LEFT		0x2A
#define SSD1306_DEACTIVATE_SCROLL						0x2E
#define SSD1306_ACTIVATE_SCROLL							0x2F
#define SSD1306_SET_VERTICAL_SCROLL_AREA				0xA3
// Addressing Setting Commands
#define SSD1306_SET_LOWER_COLUMN						0x00
#define SSD1306_SET_HIGHER_COLUMN						0x10
#define SSD1306_MEMORY_ADDR_MODE						0x20
#define SSD1306_SET_COLUMN_ADDR							0x21
#define SSD1306_SET_PAGE_ADDR							0x22
// Hardware Configuration Commands
#define SSD1306_SET_START_LINE							0x40
#define SSD1306_SET_SEGMENT_REMAP						0xA0
#define SSD1306_SET_MULTIPLEX_RATIO						0xA8
#define SSD1306_COM_SCAN_DIR_INC						0xC0
#define SSD1306_COM_SCAN_DIR_DEC						0xC8
#define SSD1306_SET_DISPLAY_OFFSET						0xD3
#define SSD1306_SET_COM_PINS							0xDA
#define SSD1306_CHARGE_PUMP								0x8D
// Timing & Driving Scheme Setting Commands
#define SSD1306_SET_DISPLAY_CLOCK_DIV_RATIO				0xD5
#define SSD1306_SET_PRECHARGE_PERIOD					0xD9
#define SSD1306_SET_VCOM_DESELECT						0xDB
								
#define SSD1306_SEND_CMD(x) this->cmd(x);\
							if(this->busFailure)\
							{\
								sei();\
								return;\
							}\

const uint8_t font[] PROGMEM =
{
0x06, 0x08, 0x20, 0x5f,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   // sp
0x00, 0x00, 0x00, 0x2f, 0x00, 0x00,   // !
0x00, 0x00, 0x07, 0x00, 0x07, 0x00,   // "
0x00, 0x14, 0x7f, 0x14, 0x7f, 0x14,   // #
0x00, 0x24, 0x2a, 0x7f, 0x2a, 0x12,   // $
0x00, 0x23, 0x13, 0x08, 0x64, 0x62,   // %
0x00, 0x36, 0x49, 0x55, 0x22, 0x50,   // &
0x00, 0x00, 0x05, 0x03, 0x00, 0x00,   // '
0x00, 0x00, 0x1c, 0x22, 0x41, 0x00,   // (
0x00, 0x00, 0x41, 0x22, 0x1c, 0x00,   // )
0x00, 0x14, 0x08, 0x3E, 0x08, 0x14,   // *
0x00, 0x08, 0x08, 0x3E, 0x08, 0x08,   // +
0x00, 0x00, 0x00, 0xA0, 0x60, 0x00,   // ,
0x00, 0x08, 0x08, 0x08, 0x08, 0x08,   // -
0x00, 0x00, 0x60, 0x60, 0x00, 0x00,   // .
0x00, 0x20, 0x10, 0x08, 0x04, 0x02,   // /

0x00, 0x3E, 0x51, 0x49, 0x45, 0x3E,   // 0
0x00, 0x00, 0x42, 0x7F, 0x40, 0x00,   // 1
0x00, 0x42, 0x61, 0x51, 0x49, 0x46,   // 2
0x00, 0x21, 0x41, 0x45, 0x4B, 0x31,   // 3
0x00, 0x18, 0x14, 0x12, 0x7F, 0x10,   // 4
0x00, 0x27, 0x45, 0x45, 0x45, 0x39,   // 5
0x00, 0x3C, 0x4A, 0x49, 0x49, 0x30,   // 6
0x00, 0x01, 0x71, 0x09, 0x05, 0x03,   // 7
0x00, 0x36, 0x49, 0x49, 0x49, 0x36,   // 8
0x00, 0x06, 0x49, 0x49, 0x29, 0x1E,   // 9
0x00, 0x00, 0x36, 0x36, 0x00, 0x00,   // :
0x00, 0x00, 0x56, 0x36, 0x00, 0x00,   // ;
0x00, 0x08, 0x14, 0x22, 0x41, 0x00,   // <
0x00, 0x14, 0x14, 0x14, 0x14, 0x14,   // =
0x00, 0x00, 0x41, 0x22, 0x14, 0x08,   // >
0x00, 0x02, 0x01, 0x51, 0x09, 0x06,   // ?

0x00, 0x32, 0x49, 0x59, 0x51, 0x3E,   // @
0x00, 0x7C, 0x12, 0x11, 0x12, 0x7C,   // A
0x00, 0x7F, 0x49, 0x49, 0x49, 0x36,   // B
0x00, 0x3E, 0x41, 0x41, 0x41, 0x22,   // C
0x00, 0x7F, 0x41, 0x41, 0x22, 0x1C,   // D
0x00, 0x7F, 0x49, 0x49, 0x49, 0x41,   // E
0x00, 0x7F, 0x09, 0x09, 0x09, 0x01,   // F
0x00, 0x3E, 0x41, 0x49, 0x49, 0x7A,   // G
0x00, 0x7F, 0x08, 0x08, 0x08, 0x7F,   // H
0x00, 0x00, 0x41, 0x7F, 0x41, 0x00,   // I
0x00, 0x20, 0x40, 0x41, 0x3F, 0x01,   // J
0x00, 0x7F, 0x08, 0x14, 0x22, 0x41,   // K
0x00, 0x7F, 0x40, 0x40, 0x40, 0x40,   // L
0x00, 0x7F, 0x02, 0x0C, 0x02, 0x7F,   // M
0x00, 0x7F, 0x04, 0x08, 0x10, 0x7F,   // N
0x00, 0x3E, 0x41, 0x41, 0x41, 0x3E,   // O

0x00, 0x7F, 0x09, 0x09, 0x09, 0x06,   // P
0x00, 0x3E, 0x41, 0x51, 0x21, 0x5E,   // Q
0x00, 0x7F, 0x09, 0x19, 0x29, 0x46,   // R
0x00, 0x46, 0x49, 0x49, 0x49, 0x31,   // S
0x00, 0x01, 0x01, 0x7F, 0x01, 0x01,   // T
0x00, 0x3F, 0x40, 0x40, 0x40, 0x3F,   // U
0x00, 0x1F, 0x20, 0x40, 0x20, 0x1F,   // V
0x00, 0x3F, 0x40, 0x38, 0x40, 0x3F,   // W
0x00, 0x63, 0x14, 0x08, 0x14, 0x63,   // X
0x00, 0x07, 0x08, 0x70, 0x08, 0x07,   // Y
0x00, 0x61, 0x51, 0x49, 0x45, 0x43,   // Z
0x00, 0x00, 0x7F, 0x41, 0x41, 0x00,   // [
0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55,   // Backslash (Checker pattern)
0x00, 0x00, 0x41, 0x41, 0x7F, 0x00,   // ]
0x00, 0x04, 0x02, 0x01, 0x02, 0x04,   // ^
0x00, 0x40, 0x40, 0x40, 0x40, 0x40,   // _

0x00, 0x00, 0x03, 0x05, 0x00, 0x00,   // `
0x00, 0x20, 0x54, 0x54, 0x54, 0x78,   // a
0x00, 0x7F, 0x48, 0x44, 0x44, 0x38,   // b
0x00, 0x38, 0x44, 0x44, 0x44, 0x20,   // c
0x00, 0x38, 0x44, 0x44, 0x48, 0x7F,   // d
0x00, 0x38, 0x54, 0x54, 0x54, 0x18,   // e
0x00, 0x08, 0x7E, 0x09, 0x01, 0x02,   // f
0x00, 0x18, 0xA4, 0xA4, 0xA4, 0x7C,   // g
0x00, 0x7F, 0x08, 0x04, 0x04, 0x78,   // h
0x00, 0x00, 0x44, 0x7D, 0x40, 0x00,   // i
0x00, 0x40, 0x80, 0x84, 0x7D, 0x00,   // j
0x00, 0x7F, 0x10, 0x28, 0x44, 0x00,   // k
0x00, 0x00, 0x41, 0x7F, 0x40, 0x00,   // l
0x00, 0x7C, 0x04, 0x18, 0x04, 0x78,   // m
0x00, 0x7C, 0x08, 0x04, 0x04, 0x78,   // n
0x00, 0x38, 0x44, 0x44, 0x44, 0x38,   // o

0x00, 0xFC, 0x24, 0x24, 0x24, 0x18,   // p
0x00, 0x18, 0x24, 0x24, 0x18, 0xFC,   // q
0x00, 0x7C, 0x08, 0x04, 0x04, 0x08,   // r
0x00, 0x48, 0x54, 0x54, 0x54, 0x20,   // s
0x00, 0x04, 0x3F, 0x44, 0x40, 0x20,   // t
0x00, 0x3C, 0x40, 0x40, 0x20, 0x7C,   // u
0x00, 0x1C, 0x20, 0x40, 0x20, 0x1C,   // v
0x00, 0x3C, 0x40, 0x30, 0x40, 0x3C,   // w
0x00, 0x44, 0x28, 0x10, 0x28, 0x44,   // x
0x00, 0x1C, 0xA0, 0xA0, 0xA0, 0x7C,   // y
0x00, 0x44, 0x64, 0x54, 0x4C, 0x44,   // z
0x00, 0x00, 0x10, 0x7C, 0x82, 0x00,   // {
0x00, 0x00, 0x00, 0xFF, 0x00, 0x00,   // |
0x00, 0x00, 0x82, 0x7C, 0x10, 0x00,   // }
0x00, 0x00, 0x06, 0x09, 0x09, 0x06    // ~ (Degrees)
};

//Created using dot2pic.com
const uint8_t repeatBmp[] PROGMEM ={
	0x00,0x08,0x18,0x3e,0x1a,0x4a,0x42,0x42,0x42,0x42,0x52,0x58,0x7c,0x18,0x10,0x00};

//Created using dot2pic.com
const uint8_t playPauseBmp[] PROGMEM ={
	0x00,0x00,0x00,0x01,0x03,0x07,0x0f,0x1f,0x3f,0x00,0x00,0x3f,0x3f,0x00,0x00,0x00,
	0x00,0x00,0x00,0x80,0xc0,0xe0,0xf0,0xf8,0xfc,0x00,0x00,0xfc,0xfc,0x00,0x00,0x00};

//Created using dot2pic.com
const uint8_t fastForwardBmp[] PROGMEM={
	0x00,0x00,0x01,0x03,0x07,0x0f,0x1f,0x3f,0x01,0x03,0x07,0x0f,0x1f,0x3f,0x00,0x00,
	0x00,0x00,0x80,0xc0,0xe0,0xf0,0xf8,0xfc,0x80,0xc0,0xe0,0xf0,0xf8,0xfc,0x00,0x00};

//Created using dot2pic.com
const uint8_t fastRewindBmp[] PROGMEM ={
	0x00,0x00,0x3f,0x1f,0x0f,0x07,0x03,0x01,0x3f,0x1f,0x0f,0x07,0x03,0x01,0x00,0x00,
	0x00,0x00,0xfc,0xf8,0xf0,0xe0,0xc0,0x80,0xfc,0xf8,0xf0,0xe0,0xc0,0x80,0x00,0x00};

//Created using dot2pic.com
const uint8_t playBmp[] PROGMEM ={
	0x00,0x00,0x00,0x00,0x00,0x01,0x03,0x07,0x0f,0x1f,0x3f,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x80,0xc0,0xe0,0xf0,0xf8,0xfc,0x00,0x00,0x00,0x00,0x00};

//Created using dot2pic.com
const uint8_t pauseBmp[] PROGMEM = {
	0x00,0x00,0x00,0x1f,0x1f,0x1f,0x1f,0x00,0x00,0x1f,0x1f,0x1f,0x1f,0x00,0x00,0x00,
	0x00,0x00,0x00,0xf8,0xf8,0xf8,0xf8,0x00,0x00,0xf8,0xf8,0xf8,0xf8,0x00,0x00,0x00};

//Created using dot2pic.com
const uint8_t stopBmp[] PROGMEM = {
	0x00,0x00,0x00,0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,0x00,0x00,0x00,
	0x00,0x00,0x00,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0x00,0x00,0x00};

//Created using dot2pic.com
const uint8_t recordBmp[] PROGMEM ={
	0x00,0x00,0x00,0x03,0x0f,0x0f,0x1f,0x1f,0x1f,0x1f,0x0f,0x0f,0x03,0x00,0x00,0x00,
	0x00,0x00,0x00,0xc0,0xf0,0xf0,0xf8,0xf8,0xf8,0xf8,0xf0,0xf0,0xc0,0x00,0x00,0x00};

//Created using dot2pic.com
const uint8_t logoBmp[] PROGMEM ={
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x3e,0x62,0x42,0x42,
	0x7c,0x00,0x01,0x3e,0x40,0x00,0x0c,0x4a,0x4a,0x4a,0x6c,0x00,0x00,0x3e,0x40,0x00,
	0x3e,0x42,0x02,0x07,0x3e,0x40,0x00,0x38,0x68,0x44,0x45,0x47,0x40,0x00,0x00,0x00,
	0x00,0x1c,0x22,0x42,0x42,0x7c,0x00,0x00,0x1e,0xe2,0x42,0x42,0x7c,0x00,0x00,0x04,
	0x44,0x44,0x45,0x7e,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,
	0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,
	0x03,0x03,0x03,0x83,0x03,0x01,0x00,0x80,0x80,0x80,0x80,0x00,0x03,0x03,0x03,0x03,
	0x03,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x80,
	0x80,0x80,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x06,0x1f,0x3f,0x3f,0x7f,0x7f,0x67,0x63,0x73,0x71,0x3c,0x3c,
	0x00,0x00,0x00,0x00,0x00,0x01,0x03,0x03,0x03,0x63,0x7f,0x7f,0x7f,0x7f,0x60,0x03,
	0x17,0x37,0x77,0x76,0x77,0x7f,0x7f,0x3f,0x1e,0x0f,0x1f,0x3f,0x7f,0x79,0x71,0x77,
	0xff,0xff,0xff,0xfd,0x80,0x0f,0x1f,0x3f,0x7f,0x79,0x71,0x77,0xff,0xff,0xff,0xfd,
	0x80,0x03,0x17,0x37,0x77,0x76,0x77,0x7f,0x7f,0x3f,0x1c,0x00,0x30,0x30,0x7f,0x7f,
	0x7f,0x7f,0x3c,0x00,0x06,0x1f,0x3f,0x3f,0x7f,0x7f,0x67,0x63,0x73,0x71,0x3c,0x3c,
	0x00,0x23,0x3f,0x7f,0x7f,0x7c,0x30,0x21,0x7f,0x7f,0x7f,0x3e,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x38,0x38,0x98,0x8c,0xcc,0xfc,0xfc,0xf8,0xf8,0xf0,0xc0,0x00,
	0x00,0x00,0x00,0x00,0x00,0xc0,0xc0,0xc0,0x80,0xc0,0xc0,0xc0,0x80,0x80,0x00,0x00,
	0x80,0xc0,0xc0,0xc0,0xc0,0x80,0x80,0x00,0x00,0x80,0xc0,0xc0,0xc0,0xc0,0x80,0xc0,
	0xc0,0xc0,0x80,0x80,0x00,0x80,0xc0,0xc0,0xc0,0xc0,0x80,0xc0,0xc0,0xc0,0x80,0x80,
	0x00,0x00,0x80,0xc0,0xc0,0xc0,0xc0,0x80,0x80,0x00,0x00,0xc0,0xc0,0xf0,0xf0,0xf0,
	0xe0,0xe0,0xc0,0x00,0x38,0x38,0x98,0x8c,0xcc,0xfc,0xfc,0xf8,0xf8,0xf0,0xc0,0x00,
	0x00,0xc0,0xc0,0xc0,0xc0,0x80,0x00,0xc0,0xc0,0xc0,0xc0,0x80,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};

class Screen
{
public:
	Screen(bool i2cChannel);
	void init();
	void clrScreen();
	void drawRect(int x1, int y1, int x2, int y2, bool color);
	void drawImage(const uint8_t *string, uint8_t x, uint8_t y, uint8_t width, uint8_t height, bool invert = 0);
	void printString(const uint8_t *string, uint8_t x, uint8_t y, bool invert = 0);
	void* operator new(size_t size);
	bool busFailure;
protected:
	bool waitForAck();
	void cmd(uint8_t cmd);
	volatile uint8_t twsr;
	volatile uint8_t twbr;
	volatile uint8_t twdr;
	volatile uint8_t twcr;

};
#endif